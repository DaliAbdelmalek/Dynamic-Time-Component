{"version":3,"sources":["components/dynamictime/dynamictime.js","App.js","serviceWorker.js","index.js"],"names":["Dynamictime","state","time","this","props","hrs","mins","secs","react_default","a","createElement","className","style","zIndex","src","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newtime","e","target","value","setState","isNaN","alert","type","onChange","dynamictime_dynamictime","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAqDeA,oNAlDXC,MAAQ,2EAIJ,IAAIC,EAAOC,KAAKC,MAAMF,KAClBG,EAAM,EACNC,EAAO,EACPC,EAAO,EAaX,OAJAF,GAFAA,IAFAH,IAFAA,GAAQA,EADCA,EAAO,KACK,MACrBK,EAAOL,EAAO,KACS,KACvBI,EAAOJ,EAAO,KACQ,IAET,GAAM,IAAMG,EAAMA,EAC/BC,EAAQA,EAAO,GAAM,IAAMA,EAAOA,EAClCC,EAAQA,EAAO,GAAM,IAAMA,EAAOA,EAG9BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,OAAQ,QAAUF,UAAU,SACtCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQG,IAAI,mGAE/BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIL,EAAJ,KACAG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,QACAH,EAAAC,EAAAC,cAAA,wBAIJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,KACAE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,WAEJH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIH,GACJC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UACAH,EAAAC,EAAAC,cAAA,iCAzCEK,cCsBXC,cArBb,SAAAA,EAAYZ,GAAM,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAOC,KAKTmB,QAAQ,SAACC,GACHA,EAAEC,OAAOC,MAAM,OAAUT,EAAKU,SAAS,CAACzB,KAAKsB,EAAEC,OAAOC,QACtDE,MAAMJ,EAAEC,OAAOC,QAAQG,MAAQ,iBANnCZ,EAAKhB,MAAO,CAACC,KAAK,IAFAe,wEAYhB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,OAAOmB,KAAK,OAAOJ,MAAOvB,KAAKF,MAAMyB,MAAOK,SAAU5B,KAAKoB,UAC5Ef,EAAAC,EAAAC,cAACsB,EAAD,CAAa9B,KAAMC,KAAKF,MAAMC,eAhBpBa,aCUEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.500c9218.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './dynamictime.css'\r\nclass Dynamictime extends Component {\r\n    state = {}\r\n\r\n\r\n    render() {\r\n        let time = this.props.time\r\n        let hrs = 0;\r\n        let mins = 0;\r\n        let secs = 0;\r\n\r\n        let ms = time % 1000;\r\n        time = (time - ms) / 1000;\r\n        secs = time % 60;\r\n        time = (time - secs) / 60;\r\n        mins = time % 60;\r\n        hrs = (time - mins) / 60;\r\n\r\n        hrs = (hrs < 10) ? \"0\" + hrs : hrs;\r\n        mins = (mins < 10) ? \"0\" + mins : mins;\r\n        secs = (secs < 10) ? \"0\" + secs : secs;\r\n\r\n        return (\r\n            <div className='all'>\r\n                <div style={{ zIndex: '2222' }} className='image'>\r\n                    <img className='photo' src='https://financialtribune.com/sites/default/files/field/image/17january/11_mr_registry_170.png' />\r\n                </div>\r\n                <div className='time'>\r\n                    <div >\r\n                        <p>{hrs}:</p>\r\n                        <p className='timer'>Hour</p>\r\n                        <button>\r\n                            Start\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <p>{mins}:</p>\r\n                        <p className='timer'>Minute</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>{secs}</p>\r\n                        <p className='timer'>Second</p>\r\n                        <button>\r\n                            Reset\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dynamictime;","import React, { Component } from 'react';\nimport Dynamictime from './components/dynamictime/dynamictime.js'\nclass App extends Component {\n  constructor(props){\n  super (props)\n  this.state=({time:''})\n  \n}\n\nnewtime=(e)=>{\n  if (e.target.value<86400000){this.setState({time:e.target.value})}\n  if (isNaN(e.target.value)) alert  ('Not a number')\n}\n \n  render() { \n    return ( \n      <div>\n        <input className='text' type='text' value={this.state.value} onChange={this.newtime}></input>\n        <Dynamictime time={this.state.time}/>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}